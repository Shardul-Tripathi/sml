# Generated from sml.g4 by ANTLR 4.7
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2.")
        buf.write("\u0113\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\3\2\3\2\3\3\3")
        buf.write("\3\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3")
        buf.write("\n\3\n\3\n\3\n\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\16\3\16")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22")
        buf.write("\3\23\3\23\3\24\3\24\3\25\3\25\3\26\3\26\3\26\3\27\3\27")
        buf.write("\3\27\3\30\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34")
        buf.write("\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3\37\3 \3 \3!\3!\3")
        buf.write("!\3\"\3\"\3\"\3#\3#\3#\3$\3$\3$\3%\3%\3%\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(")
        buf.write("\3(\3)\3)\3)\3)\3)\3)\3)\3)\3)\5)\u00e9\n)\3*\3*\3*\7")
        buf.write("*\u00ee\n*\f*\16*\u00f1\13*\3+\3+\3,\3,\3-\3-\3.\3.\3")
        buf.write("/\6/\u00fc\n/\r/\16/\u00fd\3\60\3\60\3\61\6\61\u0103\n")
        buf.write("\61\r\61\16\61\u0104\3\61\3\61\3\62\3\62\3\62\3\62\7\62")
        buf.write("\u010d\n\62\f\62\16\62\u0110\13\62\3\62\3\62\2\2\63\3")
        buf.write("\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16")
        buf.write("\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61")
        buf.write("\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*")
        buf.write("S+U\2W\2Y\2[,]\2_\2a-c.\3\2\7\4\2C\\c|\3\2\62;\3\2\63")
        buf.write(";\5\2\13\f\17\17\"\"\4\2\f\f\17\17\2\u0113\2\3\3\2\2\2")
        buf.write("\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r")
        buf.write("\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3")
        buf.write("\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2")
        buf.write("\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'")
        buf.write("\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2")
        buf.write("\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29")
        buf.write("\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2")
        buf.write("C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2")
        buf.write("\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2[\3\2\2")
        buf.write("\2\2a\3\2\2\2\2c\3\2\2\2\3e\3\2\2\2\5g\3\2\2\2\7i\3\2")
        buf.write("\2\2\tk\3\2\2\2\13t\3\2\2\2\r}\3\2\2\2\17\177\3\2\2\2")
        buf.write("\21\u0081\3\2\2\2\23\u0083\3\2\2\2\25\u0087\3\2\2\2\27")
        buf.write("\u0089\3\2\2\2\31\u008c\3\2\2\2\33\u008e\3\2\2\2\35\u0090")
        buf.write("\3\2\2\2\37\u0095\3\2\2\2!\u0097\3\2\2\2#\u0099\3\2\2")
        buf.write("\2%\u009b\3\2\2\2\'\u009d\3\2\2\2)\u009f\3\2\2\2+\u00a1")
        buf.write("\3\2\2\2-\u00a4\3\2\2\2/\u00a7\3\2\2\2\61\u00aa\3\2\2")
        buf.write("\2\63\u00ac\3\2\2\2\65\u00ae\3\2\2\2\67\u00b0\3\2\2\2")
        buf.write("9\u00b2\3\2\2\2;\u00b4\3\2\2\2=\u00b6\3\2\2\2?\u00b9\3")
        buf.write("\2\2\2A\u00bb\3\2\2\2C\u00be\3\2\2\2E\u00c1\3\2\2\2G\u00c4")
        buf.write("\3\2\2\2I\u00c7\3\2\2\2K\u00ca\3\2\2\2M\u00d1\3\2\2\2")
        buf.write("O\u00d8\3\2\2\2Q\u00e8\3\2\2\2S\u00ea\3\2\2\2U\u00f2\3")
        buf.write("\2\2\2W\u00f4\3\2\2\2Y\u00f6\3\2\2\2[\u00f8\3\2\2\2]\u00fb")
        buf.write("\3\2\2\2_\u00ff\3\2\2\2a\u0102\3\2\2\2c\u0108\3\2\2\2")
        buf.write("ef\7}\2\2f\4\3\2\2\2gh\7\177\2\2h\6\3\2\2\2ij\7=\2\2j")
        buf.write("\b\3\2\2\2kl\7w\2\2lm\7k\2\2mn\7p\2\2no\7v\2\2op\7\65")
        buf.write("\2\2pq\7\64\2\2qr\7a\2\2rs\7v\2\2s\n\3\2\2\2tu\7w\2\2")
        buf.write("uv\7k\2\2vw\7p\2\2wx\7v\2\2xy\7\63\2\2yz\78\2\2z{\7a\2")
        buf.write("\2{|\7v\2\2|\f\3\2\2\2}~\7?\2\2~\16\3\2\2\2\177\u0080")
        buf.write("\7]\2\2\u0080\20\3\2\2\2\u0081\u0082\7_\2\2\u0082\22\3")
        buf.write("\2\2\2\u0083\u0084\7h\2\2\u0084\u0085\7q\2\2\u0085\u0086")
        buf.write("\7t\2\2\u0086\24\3\2\2\2\u0087\u0088\7<\2\2\u0088\26\3")
        buf.write("\2\2\2\u0089\u008a\7k\2\2\u008a\u008b\7h\2\2\u008b\30")
        buf.write("\3\2\2\2\u008c\u008d\7*\2\2\u008d\32\3\2\2\2\u008e\u008f")
        buf.write("\7+\2\2\u008f\34\3\2\2\2\u0090\u0091\7g\2\2\u0091\u0092")
        buf.write("\7n\2\2\u0092\u0093\7u\2\2\u0093\u0094\7g\2\2\u0094\36")
        buf.write("\3\2\2\2\u0095\u0096\7/\2\2\u0096 \3\2\2\2\u0097\u0098")
        buf.write("\7\u0080\2\2\u0098\"\3\2\2\2\u0099\u009a\7,\2\2\u009a")
        buf.write("$\3\2\2\2\u009b\u009c\7\61\2\2\u009c&\3\2\2\2\u009d\u009e")
        buf.write("\7\'\2\2\u009e(\3\2\2\2\u009f\u00a0\7-\2\2\u00a0*\3\2")
        buf.write("\2\2\u00a1\u00a2\7>\2\2\u00a2\u00a3\7>\2\2\u00a3,\3\2")
        buf.write("\2\2\u00a4\u00a5\7@\2\2\u00a5\u00a6\7@\2\2\u00a6.\3\2")
        buf.write("\2\2\u00a7\u00a8\7B\2\2\u00a8\u00a9\7@\2\2\u00a9\60\3")
        buf.write("\2\2\2\u00aa\u00ab\7(\2\2\u00ab\62\3\2\2\2\u00ac\u00ad")
        buf.write("\7`\2\2\u00ad\64\3\2\2\2\u00ae\u00af\7~\2\2\u00af\66\3")
        buf.write("\2\2\2\u00b0\u00b1\7A\2\2\u00b18\3\2\2\2\u00b2\u00b3\7")
        buf.write("#\2\2\u00b3:\3\2\2\2\u00b4\u00b5\7>\2\2\u00b5<\3\2\2\2")
        buf.write("\u00b6\u00b7\7>\2\2\u00b7\u00b8\7?\2\2\u00b8>\3\2\2\2")
        buf.write("\u00b9\u00ba\7@\2\2\u00ba@\3\2\2\2\u00bb\u00bc\7@\2\2")
        buf.write("\u00bc\u00bd\7?\2\2\u00bdB\3\2\2\2\u00be\u00bf\7?\2\2")
        buf.write("\u00bf\u00c0\7?\2\2\u00c0D\3\2\2\2\u00c1\u00c2\7#\2\2")
        buf.write("\u00c2\u00c3\7?\2\2\u00c3F\3\2\2\2\u00c4\u00c5\7(\2\2")
        buf.write("\u00c5\u00c6\7(\2\2\u00c6H\3\2\2\2\u00c7\u00c8\7~\2\2")
        buf.write("\u00c8\u00c9\7~\2\2\u00c9J\3\2\2\2\u00ca\u00cb\7k\2\2")
        buf.write("\u00cb\u00cc\7p\2\2\u00cc\u00cd\7r\2\2\u00cd\u00ce\7w")
        buf.write("\2\2\u00ce\u00cf\7v\2\2\u00cf\u00d0\7\63\2\2\u00d0L\3")
        buf.write("\2\2\2\u00d1\u00d2\7k\2\2\u00d2\u00d3\7p\2\2\u00d3\u00d4")
        buf.write("\7r\2\2\u00d4\u00d5\7w\2\2\u00d5\u00d6\7v\2\2\u00d6\u00d7")
        buf.write("\7\64\2\2\u00d7N\3\2\2\2\u00d8\u00d9\7q\2\2\u00d9\u00da")
        buf.write("\7w\2\2\u00da\u00db\7v\2\2\u00db\u00dc\7r\2\2\u00dc\u00dd")
        buf.write("\7w\2\2\u00dd\u00de\7v\2\2\u00deP\3\2\2\2\u00df\u00e0")
        buf.write("\7v\2\2\u00e0\u00e1\7t\2\2\u00e1\u00e2\7w\2\2\u00e2\u00e9")
        buf.write("\7g\2\2\u00e3\u00e4\7h\2\2\u00e4\u00e5\7c\2\2\u00e5\u00e6")
        buf.write("\7n\2\2\u00e6\u00e7\7u\2\2\u00e7\u00e9\7g\2\2\u00e8\u00df")
        buf.write("\3\2\2\2\u00e8\u00e3\3\2\2\2\u00e9R\3\2\2\2\u00ea\u00ef")
        buf.write("\5U+\2\u00eb\u00ee\5U+\2\u00ec\u00ee\5Y-\2\u00ed\u00eb")
        buf.write("\3\2\2\2\u00ed\u00ec\3\2\2\2\u00ee\u00f1\3\2\2\2\u00ef")
        buf.write("\u00ed\3\2\2\2\u00ef\u00f0\3\2\2\2\u00f0T\3\2\2\2\u00f1")
        buf.write("\u00ef\3\2\2\2\u00f2\u00f3\5W,\2\u00f3V\3\2\2\2\u00f4")
        buf.write("\u00f5\t\2\2\2\u00f5X\3\2\2\2\u00f6\u00f7\t\3\2\2\u00f7")
        buf.write("Z\3\2\2\2\u00f8\u00f9\5]/\2\u00f9\\\3\2\2\2\u00fa\u00fc")
        buf.write("\5Y-\2\u00fb\u00fa\3\2\2\2\u00fc\u00fd\3\2\2\2\u00fd\u00fb")
        buf.write("\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe^\3\2\2\2\u00ff\u0100")
        buf.write("\t\4\2\2\u0100`\3\2\2\2\u0101\u0103\t\5\2\2\u0102\u0101")
        buf.write("\3\2\2\2\u0103\u0104\3\2\2\2\u0104\u0102\3\2\2\2\u0104")
        buf.write("\u0105\3\2\2\2\u0105\u0106\3\2\2\2\u0106\u0107\b\61\2")
        buf.write("\2\u0107b\3\2\2\2\u0108\u0109\7\61\2\2\u0109\u010a\7\61")
        buf.write("\2\2\u010a\u010e\3\2\2\2\u010b\u010d\n\6\2\2\u010c\u010b")
        buf.write("\3\2\2\2\u010d\u0110\3\2\2\2\u010e\u010c\3\2\2\2\u010e")
        buf.write("\u010f\3\2\2\2\u010f\u0111\3\2\2\2\u0110\u010e\3\2\2\2")
        buf.write("\u0111\u0112\b\62\3\2\u0112d\3\2\2\2\t\2\u00e8\u00ed\u00ef")
        buf.write("\u00fd\u0104\u010e\4\b\2\2\2\3\2")
        return buf.getvalue()


class smlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    InputA = 37
    InputB = 38
    Output = 39
    BoolConstant = 40
    Ident = 41
    IntegerConstant = 42
    WS = 43
    LineComment = 44

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "';'", "'uint32_t'", "'uint16_t'", "'='", "'['", 
            "']'", "'for'", "':'", "'if'", "'('", "')'", "'else'", "'-'", 
            "'~'", "'*'", "'/'", "'%'", "'+'", "'<<'", "'>>'", "'@>'", "'&'", 
            "'^'", "'|'", "'?'", "'!'", "'<'", "'<='", "'>'", "'>='", "'=='", 
            "'!='", "'&&'", "'||'", "'input1'", "'input2'", "'output'" ]

    symbolicNames = [ "<INVALID>",
            "InputA", "InputB", "Output", "BoolConstant", "Ident", "IntegerConstant", 
            "WS", "LineComment" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "InputA", "InputB", 
                  "Output", "BoolConstant", "Ident", "IdentNondigit", "Nondigit", 
                  "Digit", "IntegerConstant", "DecimalConstant", "NonzeroDigit", 
                  "WS", "LineComment" ]

    grammarFileName = "sml.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


