# Generated from sml.g4 by ANTLR 4.7
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2/")
        buf.write("\u011c\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\3\2")
        buf.write("\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\13\3")
        buf.write("\13\3\f\3\f\3\r\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24")
        buf.write("\3\25\3\25\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\31")
        buf.write("\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36")
        buf.write("\3\36\3\37\3\37\3 \3 \3 \3!\3!\3\"\3\"\3\"\3#\3#\3#\3")
        buf.write("$\3$\3$\3%\3%\3%\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write("\3(\3(\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3)\3*\3*\3*\3")
        buf.write("*\3*\3*\3*\3*\3*\5*\u00f2\n*\3+\3+\3+\7+\u00f7\n+\f+\16")
        buf.write("+\u00fa\13+\3,\3,\3-\3-\3.\3.\3/\3/\3\60\6\60\u0105\n")
        buf.write("\60\r\60\16\60\u0106\3\61\3\61\3\62\6\62\u010c\n\62\r")
        buf.write("\62\16\62\u010d\3\62\3\62\3\63\3\63\3\63\3\63\7\63\u0116")
        buf.write("\n\63\f\63\16\63\u0119\13\63\3\63\3\63\2\2\64\3\3\5\4")
        buf.write("\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17")
        buf.write("\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63")
        buf.write("\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W\2")
        buf.write("Y\2[\2]-_\2a\2c.e/\3\2\7\4\2C\\c|\3\2\62;\3\2\63;\5\2")
        buf.write("\13\f\17\17\"\"\4\2\f\f\17\17\2\u011c\2\3\3\2\2\2\2\5")
        buf.write("\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2")
        buf.write("\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2")
        buf.write("\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2")
        buf.write("\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2")
        buf.write("\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61")
        buf.write("\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2")
        buf.write("\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3")
        buf.write("\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M")
        buf.write("\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2")
        buf.write("]\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\3g\3\2\2\2\5i\3\2\2\2")
        buf.write("\7k\3\2\2\2\tm\3\2\2\2\13t\3\2\2\2\r}\3\2\2\2\17\u0086")
        buf.write("\3\2\2\2\21\u0088\3\2\2\2\23\u008a\3\2\2\2\25\u008c\3")
        buf.write("\2\2\2\27\u0090\3\2\2\2\31\u0092\3\2\2\2\33\u0095\3\2")
        buf.write("\2\2\35\u0097\3\2\2\2\37\u0099\3\2\2\2!\u009e\3\2\2\2")
        buf.write("#\u00a0\3\2\2\2%\u00a2\3\2\2\2\'\u00a4\3\2\2\2)\u00a6")
        buf.write("\3\2\2\2+\u00a8\3\2\2\2-\u00aa\3\2\2\2/\u00ad\3\2\2\2")
        buf.write("\61\u00b0\3\2\2\2\63\u00b3\3\2\2\2\65\u00b5\3\2\2\2\67")
        buf.write("\u00b7\3\2\2\29\u00b9\3\2\2\2;\u00bb\3\2\2\2=\u00bd\3")
        buf.write("\2\2\2?\u00bf\3\2\2\2A\u00c2\3\2\2\2C\u00c4\3\2\2\2E\u00c7")
        buf.write("\3\2\2\2G\u00ca\3\2\2\2I\u00cd\3\2\2\2K\u00d0\3\2\2\2")
        buf.write("M\u00d3\3\2\2\2O\u00da\3\2\2\2Q\u00e1\3\2\2\2S\u00f1\3")
        buf.write("\2\2\2U\u00f3\3\2\2\2W\u00fb\3\2\2\2Y\u00fd\3\2\2\2[\u00ff")
        buf.write("\3\2\2\2]\u0101\3\2\2\2_\u0104\3\2\2\2a\u0108\3\2\2\2")
        buf.write("c\u010b\3\2\2\2e\u0111\3\2\2\2gh\7}\2\2h\4\3\2\2\2ij\7")
        buf.write("\177\2\2j\6\3\2\2\2kl\7=\2\2l\b\3\2\2\2mn\7r\2\2no\7w")
        buf.write("\2\2op\7d\2\2pq\7n\2\2qr\7k\2\2rs\7e\2\2s\n\3\2\2\2tu")
        buf.write("\7w\2\2uv\7k\2\2vw\7p\2\2wx\7v\2\2xy\7\65\2\2yz\7\64\2")
        buf.write("\2z{\7a\2\2{|\7v\2\2|\f\3\2\2\2}~\7w\2\2~\177\7k\2\2\177")
        buf.write("\u0080\7p\2\2\u0080\u0081\7v\2\2\u0081\u0082\7\63\2\2")
        buf.write("\u0082\u0083\78\2\2\u0083\u0084\7a\2\2\u0084\u0085\7v")
        buf.write("\2\2\u0085\16\3\2\2\2\u0086\u0087\7?\2\2\u0087\20\3\2")
        buf.write("\2\2\u0088\u0089\7]\2\2\u0089\22\3\2\2\2\u008a\u008b\7")
        buf.write("_\2\2\u008b\24\3\2\2\2\u008c\u008d\7h\2\2\u008d\u008e")
        buf.write("\7q\2\2\u008e\u008f\7t\2\2\u008f\26\3\2\2\2\u0090\u0091")
        buf.write("\7<\2\2\u0091\30\3\2\2\2\u0092\u0093\7k\2\2\u0093\u0094")
        buf.write("\7h\2\2\u0094\32\3\2\2\2\u0095\u0096\7*\2\2\u0096\34\3")
        buf.write("\2\2\2\u0097\u0098\7+\2\2\u0098\36\3\2\2\2\u0099\u009a")
        buf.write("\7g\2\2\u009a\u009b\7n\2\2\u009b\u009c\7u\2\2\u009c\u009d")
        buf.write("\7g\2\2\u009d \3\2\2\2\u009e\u009f\7/\2\2\u009f\"\3\2")
        buf.write("\2\2\u00a0\u00a1\7\u0080\2\2\u00a1$\3\2\2\2\u00a2\u00a3")
        buf.write("\7,\2\2\u00a3&\3\2\2\2\u00a4\u00a5\7\61\2\2\u00a5(\3\2")
        buf.write("\2\2\u00a6\u00a7\7\'\2\2\u00a7*\3\2\2\2\u00a8\u00a9\7")
        buf.write("-\2\2\u00a9,\3\2\2\2\u00aa\u00ab\7>\2\2\u00ab\u00ac\7")
        buf.write(">\2\2\u00ac.\3\2\2\2\u00ad\u00ae\7@\2\2\u00ae\u00af\7")
        buf.write("@\2\2\u00af\60\3\2\2\2\u00b0\u00b1\7B\2\2\u00b1\u00b2")
        buf.write("\7@\2\2\u00b2\62\3\2\2\2\u00b3\u00b4\7(\2\2\u00b4\64\3")
        buf.write("\2\2\2\u00b5\u00b6\7`\2\2\u00b6\66\3\2\2\2\u00b7\u00b8")
        buf.write("\7~\2\2\u00b88\3\2\2\2\u00b9\u00ba\7A\2\2\u00ba:\3\2\2")
        buf.write("\2\u00bb\u00bc\7#\2\2\u00bc<\3\2\2\2\u00bd\u00be\7>\2")
        buf.write("\2\u00be>\3\2\2\2\u00bf\u00c0\7>\2\2\u00c0\u00c1\7?\2")
        buf.write("\2\u00c1@\3\2\2\2\u00c2\u00c3\7@\2\2\u00c3B\3\2\2\2\u00c4")
        buf.write("\u00c5\7@\2\2\u00c5\u00c6\7?\2\2\u00c6D\3\2\2\2\u00c7")
        buf.write("\u00c8\7?\2\2\u00c8\u00c9\7?\2\2\u00c9F\3\2\2\2\u00ca")
        buf.write("\u00cb\7#\2\2\u00cb\u00cc\7?\2\2\u00ccH\3\2\2\2\u00cd")
        buf.write("\u00ce\7(\2\2\u00ce\u00cf\7(\2\2\u00cfJ\3\2\2\2\u00d0")
        buf.write("\u00d1\7~\2\2\u00d1\u00d2\7~\2\2\u00d2L\3\2\2\2\u00d3")
        buf.write("\u00d4\7k\2\2\u00d4\u00d5\7p\2\2\u00d5\u00d6\7r\2\2\u00d6")
        buf.write("\u00d7\7w\2\2\u00d7\u00d8\7v\2\2\u00d8\u00d9\7\63\2\2")
        buf.write("\u00d9N\3\2\2\2\u00da\u00db\7k\2\2\u00db\u00dc\7p\2\2")
        buf.write("\u00dc\u00dd\7r\2\2\u00dd\u00de\7w\2\2\u00de\u00df\7v")
        buf.write("\2\2\u00df\u00e0\7\64\2\2\u00e0P\3\2\2\2\u00e1\u00e2\7")
        buf.write("q\2\2\u00e2\u00e3\7w\2\2\u00e3\u00e4\7v\2\2\u00e4\u00e5")
        buf.write("\7r\2\2\u00e5\u00e6\7w\2\2\u00e6\u00e7\7v\2\2\u00e7R\3")
        buf.write("\2\2\2\u00e8\u00e9\7v\2\2\u00e9\u00ea\7t\2\2\u00ea\u00eb")
        buf.write("\7w\2\2\u00eb\u00f2\7g\2\2\u00ec\u00ed\7h\2\2\u00ed\u00ee")
        buf.write("\7c\2\2\u00ee\u00ef\7n\2\2\u00ef\u00f0\7u\2\2\u00f0\u00f2")
        buf.write("\7g\2\2\u00f1\u00e8\3\2\2\2\u00f1\u00ec\3\2\2\2\u00f2")
        buf.write("T\3\2\2\2\u00f3\u00f8\5W,\2\u00f4\u00f7\5W,\2\u00f5\u00f7")
        buf.write("\5[.\2\u00f6\u00f4\3\2\2\2\u00f6\u00f5\3\2\2\2\u00f7\u00fa")
        buf.write("\3\2\2\2\u00f8\u00f6\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9")
        buf.write("V\3\2\2\2\u00fa\u00f8\3\2\2\2\u00fb\u00fc\5Y-\2\u00fc")
        buf.write("X\3\2\2\2\u00fd\u00fe\t\2\2\2\u00feZ\3\2\2\2\u00ff\u0100")
        buf.write("\t\3\2\2\u0100\\\3\2\2\2\u0101\u0102\5_\60\2\u0102^\3")
        buf.write("\2\2\2\u0103\u0105\5[.\2\u0104\u0103\3\2\2\2\u0105\u0106")
        buf.write("\3\2\2\2\u0106\u0104\3\2\2\2\u0106\u0107\3\2\2\2\u0107")
        buf.write("`\3\2\2\2\u0108\u0109\t\4\2\2\u0109b\3\2\2\2\u010a\u010c")
        buf.write("\t\5\2\2\u010b\u010a\3\2\2\2\u010c\u010d\3\2\2\2\u010d")
        buf.write("\u010b\3\2\2\2\u010d\u010e\3\2\2\2\u010e\u010f\3\2\2\2")
        buf.write("\u010f\u0110\b\62\2\2\u0110d\3\2\2\2\u0111\u0112\7\61")
        buf.write("\2\2\u0112\u0113\7\61\2\2\u0113\u0117\3\2\2\2\u0114\u0116")
        buf.write("\n\6\2\2\u0115\u0114\3\2\2\2\u0116\u0119\3\2\2\2\u0117")
        buf.write("\u0115\3\2\2\2\u0117\u0118\3\2\2\2\u0118\u011a\3\2\2\2")
        buf.write("\u0119\u0117\3\2\2\2\u011a\u011b\b\63\3\2\u011bf\3\2\2")
        buf.write("\2\t\2\u00f1\u00f6\u00f8\u0106\u010d\u0117\4\b\2\2\2\3")
        buf.write("\2")
        return buf.getvalue()


class smlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    InputA = 38
    InputB = 39
    Output = 40
    BoolConstant = 41
    Ident = 42
    IntegerConstant = 43
    WS = 44
    LineComment = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "';'", "'public'", "'uint32_t'", "'uint16_t'", 
            "'='", "'['", "']'", "'for'", "':'", "'if'", "'('", "')'", "'else'", 
            "'-'", "'~'", "'*'", "'/'", "'%'", "'+'", "'<<'", "'>>'", "'@>'", 
            "'&'", "'^'", "'|'", "'?'", "'!'", "'<'", "'<='", "'>'", "'>='", 
            "'=='", "'!='", "'&&'", "'||'", "'input1'", "'input2'", "'output'" ]

    symbolicNames = [ "<INVALID>",
            "InputA", "InputB", "Output", "BoolConstant", "Ident", "IntegerConstant", 
            "WS", "LineComment" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "InputA", 
                  "InputB", "Output", "BoolConstant", "Ident", "IdentNondigit", 
                  "Nondigit", "Digit", "IntegerConstant", "DecimalConstant", 
                  "NonzeroDigit", "WS", "LineComment" ]

    grammarFileName = "sml.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


